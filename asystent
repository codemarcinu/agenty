#!/bin/bash

# Alias "asystent" - uruchamianie aplikacji konsolowej Agenty
# Autor: Agenty Team
# Wersja: 1.0.0

set -e

# Automatyczne przej≈õcie do katalogu projektu
PROJECT_DIR="/home/marcin/Dokumenty/PROJEKT/AGENTY"
if [ "$PWD" != "$PROJECT_DIR" ]; then
    cd "$PROJECT_DIR"
fi

# Kolorowe komunikaty
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcja wy≈õwietlania komunikat√≥w
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Funkcja sprawdzania czy Docker jest dostƒôpny
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker nie jest zainstalowany!"
        print_info "Zainstaluj Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker nie jest uruchomiony!"
        print_info "Uruchom Docker Desktop lub sudo systemctl start docker"
        exit 1
    fi
}

# Funkcja sprawdzania czy docker-compose jest dostƒôpny
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose nie jest zainstalowany!"
        print_info "Zainstaluj Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
}

# Funkcja wy≈õwietlania menu
show_menu() {
    echo -e "${BLUE}"
    echo "ü§ñ Asystent Agenty - Menu"
    echo "=========================="
    echo "1. Uruchom w trybie deweloperskim (lokalnie)"
    echo "2. Uruchom w trybie produkcyjnym (Docker)"
    echo "3. Sprawd≈∫ status us≈Çug"
    echo "4. Zatrzymaj us≈Çugi"
    echo "5. Poka≈º logi"
    echo "6. Test aplikacji"
    echo "7. Pomoc"
    echo "0. Wyj≈õcie"
    echo -e "${NC}"
}

# Funkcja uruchamiania w trybie deweloperskim
run_dev_mode() {
    print_info "Uruchamianie w trybie deweloperskim..."
    
    # Sprawdzenie czy ≈õrodowisko wirtualne istnieje
    if [ ! -d "venv" ]; then
        print_info "Tworzenie ≈õrodowiska wirtualnego..."
        python -m venv venv
    fi
    
    # Aktywacja ≈õrodowiska wirtualnego
    source venv/bin/activate
    
    # Instalacja zale≈ºno≈õci
    print_info "Instalacja zale≈ºno≈õci..."
    pip install -r requirements-console.txt
    
    # Sprawdzenie katalog√≥w
    mkdir -p PARAGONY WIEDZA_RAG exports
    
    # Uruchomienie test√≥w
    print_info "Uruchamianie test√≥w..."
    python test_app.py
    
    # Uruchomienie aplikacji
    print_success "Uruchamianie aplikacji..."
    python -m console_app.main --debug
}

# Funkcja uruchamiania w trybie produkcyjnym
run_prod_mode() {
    print_info "Uruchamianie w trybie produkcyjnym (Docker)..."
    
    # Sprawdzenie Docker
    check_docker
    check_docker_compose
    
    # Sprawdzenie katalog√≥w
    mkdir -p PARAGONY WIEDZA_RAG exports
    
    # Uruchomienie us≈Çug
    print_info "Uruchamianie kontener√≥w..."
    docker-compose -f docker-compose.console.yaml up -d
    
    # Czekanie na gotowo≈õƒá backendu
    print_info "Oczekiwanie na gotowo≈õƒá backendu..."
    for i in {1..30}; do
        if curl -f http://localhost:8000/api/health &> /dev/null; then
            print_success "Backend jest gotowy!"
            break
        fi
        echo -n "."
        sleep 2
    done
    
    # Uruchomienie aplikacji konsolowej
    print_success "Uruchamianie aplikacji konsolowej..."
    docker-compose -f docker-compose.console.yaml run --rm console-app
}

# Funkcja sprawdzania statusu
check_status() {
    print_info "Sprawdzanie statusu us≈Çug..."
    
    # Sprawdzenie Docker
    if command -v docker &> /dev/null; then
        print_info "Status kontener√≥w:"
        docker ps --filter "name=agenty" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    else
        print_warning "Docker nie jest zainstalowany"
    fi
    
    # Sprawdzenie port√≥w
    print_info "Sprawdzanie port√≥w:"
    if netstat -tuln 2>/dev/null | grep -q ":8000 "; then
        print_success "Port 8000 (Backend) - AKTYWNY"
    else
        print_warning "Port 8000 (Backend) - NIEAKTYWNY"
    fi
    
    if netstat -tuln 2>/dev/null | grep -q ":11434 "; then
        print_success "Port 11434 (Ollama) - AKTYWNY"
    else
        print_warning "Port 11434 (Ollama) - NIEAKTYWNY"
    fi
    
    if netstat -tuln 2>/dev/null | grep -q ":6379 "; then
        print_success "Port 6379 (Redis) - AKTYWNY"
    else
        print_warning "Port 6379 (Redis) - NIEAKTYWNY"
    fi
}

# Funkcja zatrzymywania us≈Çug
stop_services() {
    print_info "Zatrzymywanie us≈Çug..."
    
    if [ -f "docker-compose.console.yaml" ]; then
        docker-compose -f docker-compose.console.yaml down
        print_success "Us≈Çugi zosta≈Çy zatrzymane"
    else
        print_warning "Plik docker-compose.console.yaml nie istnieje"
    fi
}

# Funkcja wy≈õwietlania log√≥w
show_logs() {
    print_info "Wy≈õwietlanie log√≥w..."
    
    if [ -f "docker-compose.console.yaml" ]; then
        echo -e "${BLUE}Wybierz us≈Çugƒô:${NC}"
        echo "1. Backend"
        echo "2. Ollama"
        echo "3. Redis"
        echo "4. Console App"
        echo "5. Wszystkie"
        read -p "Wybierz opcjƒô (1-5): " choice
        
        case $choice in
            1) docker-compose -f docker-compose.console.yaml logs -f agenty-backend ;;
            2) docker-compose -f docker-compose.console.yaml logs -f agenty-ollama ;;
            3) docker-compose -f docker-compose.console.yaml logs -f agenty-redis ;;
            4) docker-compose -f docker-compose.console.yaml logs -f agenty-console ;;
            5) docker-compose -f docker-compose.console.yaml logs -f ;;
            *) print_error "Nieprawid≈Çowa opcja" ;;
        esac
    else
        print_warning "Plik docker-compose.console.yaml nie istnieje"
    fi
}

# Funkcja testowania aplikacji
test_app() {
    print_info "Uruchamianie test√≥w aplikacji..."
    
    if [ -d "venv" ]; then
        source venv/bin/activate
        python test_app.py
    else
        print_warning "≈örodowisko wirtualne nie istnieje. Uruchom najpierw tryb deweloperski."
    fi
}

# Funkcja pomocy
show_help() {
    echo -e "${BLUE}"
    echo "ü§ñ Asystent Agenty - Pomoc"
    echo "=========================="
    echo ""
    echo "Komendy:"
    echo "  asystent          - Poka≈º menu g≈Ç√≥wne"
    echo "  asystent dev      - Uruchom w trybie deweloperskim"
    echo "  asystent prod     - Uruchom w trybie produkcyjnym"
    echo "  asystent status   - Sprawd≈∫ status us≈Çug"
    echo "  asystent stop     - Zatrzymaj us≈Çugi"
    echo "  asystent logs     - Poka≈º logi"
    echo "  asystent test     - Uruchom testy"
    echo "  asystent help     - Poka≈º pomoc"
    echo ""
    echo "Tryby uruchamiania:"
    echo "  - Deweloperski: Lokalne ≈õrodowisko Python"
    echo "  - Produkcyjny:  Kontenery Docker"
    echo ""
    echo "Katalogi:"
    echo "  - PARAGONY/:     Pliki paragon√≥w do przetwarzania"
    echo "  - WIEDZA_RAG/:   Dokumenty do bazy wiedzy"
    echo "  - exports/:      Wyeksportowane wyniki"
    echo ""
    echo "Porty:"
    echo "  - 8000: Backend API"
    echo "  - 11434: Ollama (AI)"
    echo "  - 6379: Redis (Cache)"
    echo -e "${NC}"
}

# G≈Ç√≥wna logika
main() {
    # Sprawdzenie argument√≥w
    if [ $# -eq 0 ]; then
        # Brak argument√≥w - poka≈º menu
        while true; do
            show_menu
            read -p "Wybierz opcjƒô (0-7): " choice
            
            case $choice in
                1) run_dev_mode; break ;;
                2) run_prod_mode; break ;;
                3) check_status ;;
                4) stop_services ;;
                5) show_logs ;;
                6) test_app ;;
                7) show_help ;;
                0) print_info "Do widzenia! üëã"; exit 0 ;;
                *) print_error "Nieprawid≈Çowa opcja. Spr√≥buj ponownie." ;;
            esac
            
            echo ""
            read -p "Naci≈õnij Enter, aby kontynuowaƒá..."
        done
    else
        # Argumenty podane - wykonaj odpowiedniƒÖ akcjƒô
        case $1 in
            dev) run_dev_mode ;;
            prod) run_prod_mode ;;
            status) check_status ;;
            stop) stop_services ;;
            logs) show_logs ;;
            test) test_app ;;
            help) show_help ;;
            *) 
                print_error "Nieznana komenda: $1"
                print_info "U≈ºyj 'asystent help' aby zobaczyƒá dostƒôpne opcje"
                exit 1
                ;;
        esac
    fi
}

# Uruchomienie g≈Ç√≥wnej funkcji
main "$@" 