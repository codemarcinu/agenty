# Ruff configuration for MyAssistant/FoodSave AI
# Based on .cursorrules standards - Updated for v0.8.1+

line-length = 88
indent-width = 4
target-version = "py312"

[lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "ARG",    # flake8-unused-arguments
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "NPY",    # numpy-vet
    "AIR",    # airflow
    "PERF",   # perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging-format
    "RUF",    # ruff-specific rules
]

ignore = [
    "E501",      # line too long (handled by line-length)
    "B008",      # do not perform function calls in argument defaults
    "C901",      # too complex
    "PLR0913",   # too many arguments
    "PLR0915",   # too many statements
    "PLR0912",   # too many branches
    "PLR0911",   # too many return statements (will be addressed in phase 2)
    "PLR2004",   # magic value comparison (will be addressed in phase 2)
    "TRY400",    # error instead of exception (will be addressed in phase 2)
    "TRY300",    # try consider else (will be addressed in phase 2)
    "TRY301",    # raise within try (will be addressed in phase 2)
    "TRY003",    # raise vanilla args (will be addressed in phase 2)
    "TRY002",    # raise vanilla class (will be addressed in phase 2)
    "TRY201",    # verbose raise (will be addressed in phase 2)
    "B904",      # raise without from inside except (will be addressed in phase 2)
    "PLC0415",   # import outside top level (will be addressed in phase 2)
    "E402",      # module import not at top of file (will be addressed in phase 2)
    "ARG002",    # unused method argument (will be addressed in phase 2)
    "ARG001",    # unused function argument (will be addressed in phase 2)
    "RET504",    # unnecessary assign (will be addressed in phase 2)
    "PTH123",    # builtin open (will be addressed in phase 2)
    "SLF001",    # private member access (will be addressed in phase 2)
    "ERA001",    # commented out code (will be addressed in phase 2)
    "PTH120",    # os path dirname (will be addressed in phase 2)
    "PTH118",    # os path join (will be addressed in phase 2)
    "PERF401",   # manual list comprehension (will be addressed in phase 2)
    "F821",      # undefined name (will be addressed in phase 2)
    "B007",      # unused loop control variable (will be addressed in phase 2)
]

exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "archive",
    "docs",
    "tests",
    "*.egg-info",
    "htmlcov",
    "coverage.xml",
    ".coverage",
    "*.pyc",
    "__pycache__",
    "temp_uploads",
    "logs",
    "backups",
    "data/vector_store",
    "data/search_cache",
]

[lint.per-file-ignores]
# Ignore specific rules for specific file patterns
"__init__.py" = ["F401"]
"tests/**/*.py" = ["PLR0911", "PLR0913", "PLR0915", "PLR0912", "ARG001", "ARG002"]
"scripts/**/*.py" = ["PLR0911", "PLR0913", "PLR0915", "PLR0912"]
"**/migrations/**/*.py" = ["E501", "PLR0911", "PLR0913", "PLR0915", "PLR0912"]
"**/generated/**/*.py" = ["E501", "F401", "F841"]
"**/legacy/**/*.py" = ["E501", "PLR0911", "PLR0913", "PLR0915", "PLR0912", "TRY400", "TRY300", "TRY301", "TRY003", "TRY002", "TRY201", "B904"]
"conftest.py" = ["PLW0603", "PLR0911", "PLR0913", "PLR0915", "PLR0912", "ARG001", "ARG002"]

[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[lint.isort]
known-first-party = ["src", "backend", "api", "core", "utils", "models", "schemas", "services", "agents", "auth", "integrations", "infrastructure", "domain", "application", "presentation", "ml_training", "orchestrator_management", "tasks", "data", "backups", "logs", "assets", "examples", "config"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "redis", "celery", "uvicorn", "httpx", "opentelemetry", "prometheus", "structlog", "numpy", "pandas", "matplotlib", "seaborn", "scikit-learn", "torch", "transformers", "ollama", "pytesseract", "opencv", "pymupdf", "faiss", "asyncpg", "psycopg2", "alembic", "cryptography", "bcrypt", "boto3", "botocore", "rapidfuzz", "pytest", "pytest-asyncio", "pytest-cov", "pytest-benchmark", "memory-profiler", "ruff", "pylint", "bandit", "black", "isort", "mypy", "pre-commit"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
force-sort-within-sections = true
force-wrap-aliases = true
combine-as-imports = true
split-on-trailing-comma = false

[lint.pycodestyle]
max-doc-length = 88

[lint.pydocstyle]
convention = "google" 